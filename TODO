Bashfiles tmplink

    bashfiles tmplink <container> <object>
    cdn

- If Content-Type == application/directory, then download all objects under
  that directory instead of downloading empty file


    cf_walk
        As a directory is encountered, a local copy is created
        We change to that directory (pushd)
        We download the object
        We pop the directory


    cf_get_object <container> <object>



    get <container>
        will get all objects in a container
    get [folder]
        will get all objects under a folder
    get [object]
        will get a particular object





- BUG: urlencode all container and object name accesses

- Allow get to work with folders

- Make rmdir handle paths in addition to containers

- Add colorization to output
    - error should be red
    - warning should be yellow

- Add sync command that syncs directory into cloudfiles under a container or a
  path

- Handle bash-completion for pseudo-hierarchical folders
    - currently we only bash complete against containers and objects

- Rework option parsing
    - Options should be parsed as part of the subcommand

- Add `ls -l` which will print size and creation date
- Add `ls -h` which will print size in human-readable form 1KB etc
- Add `ls -S` which will sort files by size
- Add `ls -r` which will reverse sort order

- Renew bashfiles.org/get (get latest)

INI file parsing:

- Reading an INI file
    - List sections
    - Read data from section

- Writing an INI file

BUGS
====

- Rework urlencoding of container and object names

- Fix Ctrl-C on large-file upload

FEATURES
========

- Add context-help:
    - bashfiles help (general help)
    - bashfiles help get (get specific help)

- Add CHANGELOG

- INI style config
    [default]
    CF_USER=foo

    [endpoint2]
    CF_USER=foo

- Ability to bind an endpoint to a container

- CloudFiles features:
    - Make container public
    - Switch to SLO large-files?
    - Add Cloudfiles v2 Auth
    - rmdir: Handle pagination for clear_container
    - Pagination to ls as well
        - limit, marker params

      Emit warning if num_objects returned equal CF_LISTING_LIMIT,
      CF_DEFAULT_LISTING_LIMIT

- Other backends:
    - S3
    - DropBox
    - GoogleDrive
    - SSH

- Consider SQLite approach of building aggregate file
    - Use Makefile

- Quick Delete by forking processes to background?

- Even more portability: Switch to sh instead of bash. Is there a system that
  will have curl but not bash?!

- Revised directory structure
/
    MakeFile
    src/
        bashfiles.sh
        lib/
            utils.sh : General purpose utilities
            platform.sh Cross-platform wrappers
        backends/
            cloudfiles.sh
    tests/


TEST
====

- Test against Linux
